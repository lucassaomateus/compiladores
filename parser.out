Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    KW_FOR
    PAR_CLOSE
    OP_LOG_AND
    ERRADO
    KW_IF_OPEN
    OP_ATRIB
    t_KW_FUNC_ARGS_SEP
    KW_FUNC_ARGS_SEP
    t_OP_ATRIB
    t_OP_LOG_OR
    t_KW_FUNCTION
    OP_INC
    t_OP_LOG_NOT
    OP_MUL
    KW_ELSE
    OP_DEC
    t_KW_FUNC_OPEN
    OP_LOG_BT
    OP_LOG_EQUAL
    TRUE
    OP_LOG_NOT
    EOF
    OP_EXP
    KW_FUNCTION
    t_KW_FPUNC
    t_KW_FOR_OPEN
    OP_LOG_BT_EKW_FUNC_OPEN
    KW_IF_CLOSE
    KW_PRINT
    t_OP_LOG_AND
    OP_SUB
    IDENTIFIER
    KW_FUNC_OPEN_ARGS
    STRING
    KW_FPUNC
    OP_LOG_OR
    t_KW_FOR_CLOSE
    KW_INPUT
    KW_WHILE
    KW_FOR_CLOSE
    t_OP_LOG_DIFF
    FLOAT_NUMBER
    OP_LOG_DIFF
    t_OP_EXP
    OP_ADD
    ID
    t_OP_LOG_LT
    OP_DIV1
    t_OP_LOG_LT_E
    t_OP_LOG_EQUAL
    KW_FUNC_CLOSE
    FALSE
    t_OP_LOG_BT_E
    PAR_OPEN
    t_OP_INC
    t_KW_IF_OPEN
    KW_FOR_OPEN
    t_OP_DEC
    OP_LOG_LT
    t_OP_LOG_BT
    OP_LOG_LT_E
    INT_NUMBER
    t_KW_FUNC_OPEN_ARGS
    KW_IF
    KW_STRING

Grammar

Rule 0     S' -> expressao
Rule 1     expressao -> expressao t_OP_ADD termo
Rule 2     expressao -> expressao t_OP_SUB termo
Rule 3     expressao -> expressao t_OP_MUL termo
Rule 4     expressao -> expressao t_OP_DIV termo
Rule 5     expressao -> termo
Rule 6     termo -> KW_FLOAT
Rule 7     termo -> KW_INT
Rule 8     termo -> t_PAR_OPEN expressao t_PAR_CLOSE

Terminals, with rules where they appear

EOF                  : 
ERRADO               : 
FALSE                : 
FLOAT_NUMBER         : 
ID                   : 
IDENTIFIER           : 
INT_NUMBER           : 
KW_ELSE              : 
KW_FLOAT             : 6
KW_FOR               : 
KW_FOR_CLOSE         : 
KW_FOR_OPEN          : 
KW_FPUNC             : 
KW_FUNCTION          : 
KW_FUNC_ARGS_SEP     : 
KW_FUNC_CLOSE        : 
KW_FUNC_OPEN_ARGS    : 
KW_IF                : 
KW_IF_CLOSE          : 
KW_IF_OPEN           : 
KW_INPUT             : 
KW_INT               : 7
KW_PRINT             : 
KW_STRING            : 
KW_WHILE             : 
OP_ADD               : 
OP_ATRIB             : 
OP_DEC               : 
OP_DIV1              : 
OP_EXP               : 
OP_INC               : 
OP_LOG_AND           : 
OP_LOG_BT            : 
OP_LOG_BT_EKW_FUNC_OPEN : 
OP_LOG_DIFF          : 
OP_LOG_EQUAL         : 
OP_LOG_LT            : 
OP_LOG_LT_E          : 
OP_LOG_NOT           : 
OP_LOG_OR            : 
OP_MUL               : 
OP_SUB               : 
PAR_CLOSE            : 
PAR_OPEN             : 
STRING               : 
TRUE                 : 
error                : 
t_KW_FOR_CLOSE       : 
t_KW_FOR_OPEN        : 
t_KW_FPUNC           : 
t_KW_FUNCTION        : 
t_KW_FUNC_ARGS_SEP   : 
t_KW_FUNC_OPEN       : 
t_KW_FUNC_OPEN_ARGS  : 
t_KW_IF_OPEN         : 
t_OP_ADD             : 1
t_OP_ATRIB           : 
t_OP_DEC             : 
t_OP_DIV             : 4
t_OP_EXP             : 
t_OP_INC             : 
t_OP_LOG_AND         : 
t_OP_LOG_BT          : 
t_OP_LOG_BT_E        : 
t_OP_LOG_DIFF        : 
t_OP_LOG_EQUAL       : 
t_OP_LOG_LT          : 
t_OP_LOG_LT_E        : 
t_OP_LOG_NOT         : 
t_OP_LOG_OR          : 
t_OP_MUL             : 3
t_OP_SUB             : 2
t_PAR_CLOSE          : 8
t_PAR_OPEN           : 8

Nonterminals, with rules where they appear

expressao            : 1 2 3 4 8 0
termo                : 1 2 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . expressao
    (1) expressao -> . expressao t_OP_ADD termo
    (2) expressao -> . expressao t_OP_SUB termo
    (3) expressao -> . expressao t_OP_MUL termo
    (4) expressao -> . expressao t_OP_DIV termo
    (5) expressao -> . termo
    (6) termo -> . KW_FLOAT
    (7) termo -> . KW_INT
    (8) termo -> . t_PAR_OPEN expressao t_PAR_CLOSE

    KW_FLOAT        shift and go to state 5
    KW_INT          shift and go to state 2
    t_PAR_OPEN      shift and go to state 3

    termo                          shift and go to state 4
    expressao                      shift and go to state 1

state 1

    (0) S' -> expressao .
    (1) expressao -> expressao . t_OP_ADD termo
    (2) expressao -> expressao . t_OP_SUB termo
    (3) expressao -> expressao . t_OP_MUL termo
    (4) expressao -> expressao . t_OP_DIV termo

    t_OP_ADD        shift and go to state 6
    t_OP_SUB        shift and go to state 9
    t_OP_MUL        shift and go to state 7
    t_OP_DIV        shift and go to state 8


state 2

    (7) termo -> KW_INT .

    t_PAR_CLOSE     reduce using rule 7 (termo -> KW_INT .)
    t_OP_ADD        reduce using rule 7 (termo -> KW_INT .)
    t_OP_SUB        reduce using rule 7 (termo -> KW_INT .)
    t_OP_MUL        reduce using rule 7 (termo -> KW_INT .)
    t_OP_DIV        reduce using rule 7 (termo -> KW_INT .)
    $end            reduce using rule 7 (termo -> KW_INT .)


state 3

    (8) termo -> t_PAR_OPEN . expressao t_PAR_CLOSE
    (1) expressao -> . expressao t_OP_ADD termo
    (2) expressao -> . expressao t_OP_SUB termo
    (3) expressao -> . expressao t_OP_MUL termo
    (4) expressao -> . expressao t_OP_DIV termo
    (5) expressao -> . termo
    (6) termo -> . KW_FLOAT
    (7) termo -> . KW_INT
    (8) termo -> . t_PAR_OPEN expressao t_PAR_CLOSE

    KW_FLOAT        shift and go to state 5
    KW_INT          shift and go to state 2
    t_PAR_OPEN      shift and go to state 3

    termo                          shift and go to state 4
    expressao                      shift and go to state 10

state 4

    (5) expressao -> termo .

    t_PAR_CLOSE     reduce using rule 5 (expressao -> termo .)
    t_OP_ADD        reduce using rule 5 (expressao -> termo .)
    t_OP_SUB        reduce using rule 5 (expressao -> termo .)
    t_OP_MUL        reduce using rule 5 (expressao -> termo .)
    t_OP_DIV        reduce using rule 5 (expressao -> termo .)
    $end            reduce using rule 5 (expressao -> termo .)


state 5

    (6) termo -> KW_FLOAT .

    t_PAR_CLOSE     reduce using rule 6 (termo -> KW_FLOAT .)
    t_OP_ADD        reduce using rule 6 (termo -> KW_FLOAT .)
    t_OP_SUB        reduce using rule 6 (termo -> KW_FLOAT .)
    t_OP_MUL        reduce using rule 6 (termo -> KW_FLOAT .)
    t_OP_DIV        reduce using rule 6 (termo -> KW_FLOAT .)
    $end            reduce using rule 6 (termo -> KW_FLOAT .)


state 6

    (1) expressao -> expressao t_OP_ADD . termo
    (6) termo -> . KW_FLOAT
    (7) termo -> . KW_INT
    (8) termo -> . t_PAR_OPEN expressao t_PAR_CLOSE

    KW_FLOAT        shift and go to state 5
    KW_INT          shift and go to state 2
    t_PAR_OPEN      shift and go to state 3

    termo                          shift and go to state 11

state 7

    (3) expressao -> expressao t_OP_MUL . termo
    (6) termo -> . KW_FLOAT
    (7) termo -> . KW_INT
    (8) termo -> . t_PAR_OPEN expressao t_PAR_CLOSE

    KW_FLOAT        shift and go to state 5
    KW_INT          shift and go to state 2
    t_PAR_OPEN      shift and go to state 3

    termo                          shift and go to state 12

state 8

    (4) expressao -> expressao t_OP_DIV . termo
    (6) termo -> . KW_FLOAT
    (7) termo -> . KW_INT
    (8) termo -> . t_PAR_OPEN expressao t_PAR_CLOSE

    KW_FLOAT        shift and go to state 5
    KW_INT          shift and go to state 2
    t_PAR_OPEN      shift and go to state 3

    termo                          shift and go to state 13

state 9

    (2) expressao -> expressao t_OP_SUB . termo
    (6) termo -> . KW_FLOAT
    (7) termo -> . KW_INT
    (8) termo -> . t_PAR_OPEN expressao t_PAR_CLOSE

    KW_FLOAT        shift and go to state 5
    KW_INT          shift and go to state 2
    t_PAR_OPEN      shift and go to state 3

    termo                          shift and go to state 14

state 10

    (8) termo -> t_PAR_OPEN expressao . t_PAR_CLOSE
    (1) expressao -> expressao . t_OP_ADD termo
    (2) expressao -> expressao . t_OP_SUB termo
    (3) expressao -> expressao . t_OP_MUL termo
    (4) expressao -> expressao . t_OP_DIV termo

    t_PAR_CLOSE     shift and go to state 15
    t_OP_ADD        shift and go to state 6
    t_OP_SUB        shift and go to state 9
    t_OP_MUL        shift and go to state 7
    t_OP_DIV        shift and go to state 8


state 11

    (1) expressao -> expressao t_OP_ADD termo .

    t_PAR_CLOSE     reduce using rule 1 (expressao -> expressao t_OP_ADD termo .)
    t_OP_ADD        reduce using rule 1 (expressao -> expressao t_OP_ADD termo .)
    t_OP_SUB        reduce using rule 1 (expressao -> expressao t_OP_ADD termo .)
    t_OP_MUL        reduce using rule 1 (expressao -> expressao t_OP_ADD termo .)
    t_OP_DIV        reduce using rule 1 (expressao -> expressao t_OP_ADD termo .)
    $end            reduce using rule 1 (expressao -> expressao t_OP_ADD termo .)


state 12

    (3) expressao -> expressao t_OP_MUL termo .

    t_PAR_CLOSE     reduce using rule 3 (expressao -> expressao t_OP_MUL termo .)
    t_OP_ADD        reduce using rule 3 (expressao -> expressao t_OP_MUL termo .)
    t_OP_SUB        reduce using rule 3 (expressao -> expressao t_OP_MUL termo .)
    t_OP_MUL        reduce using rule 3 (expressao -> expressao t_OP_MUL termo .)
    t_OP_DIV        reduce using rule 3 (expressao -> expressao t_OP_MUL termo .)
    $end            reduce using rule 3 (expressao -> expressao t_OP_MUL termo .)


state 13

    (4) expressao -> expressao t_OP_DIV termo .

    t_PAR_CLOSE     reduce using rule 4 (expressao -> expressao t_OP_DIV termo .)
    t_OP_ADD        reduce using rule 4 (expressao -> expressao t_OP_DIV termo .)
    t_OP_SUB        reduce using rule 4 (expressao -> expressao t_OP_DIV termo .)
    t_OP_MUL        reduce using rule 4 (expressao -> expressao t_OP_DIV termo .)
    t_OP_DIV        reduce using rule 4 (expressao -> expressao t_OP_DIV termo .)
    $end            reduce using rule 4 (expressao -> expressao t_OP_DIV termo .)


state 14

    (2) expressao -> expressao t_OP_SUB termo .

    t_PAR_CLOSE     reduce using rule 2 (expressao -> expressao t_OP_SUB termo .)
    t_OP_ADD        reduce using rule 2 (expressao -> expressao t_OP_SUB termo .)
    t_OP_SUB        reduce using rule 2 (expressao -> expressao t_OP_SUB termo .)
    t_OP_MUL        reduce using rule 2 (expressao -> expressao t_OP_SUB termo .)
    t_OP_DIV        reduce using rule 2 (expressao -> expressao t_OP_SUB termo .)
    $end            reduce using rule 2 (expressao -> expressao t_OP_SUB termo .)


state 15

    (8) termo -> t_PAR_OPEN expressao t_PAR_CLOSE .

    t_PAR_CLOSE     reduce using rule 8 (termo -> t_PAR_OPEN expressao t_PAR_CLOSE .)
    t_OP_ADD        reduce using rule 8 (termo -> t_PAR_OPEN expressao t_PAR_CLOSE .)
    t_OP_SUB        reduce using rule 8 (termo -> t_PAR_OPEN expressao t_PAR_CLOSE .)
    t_OP_MUL        reduce using rule 8 (termo -> t_PAR_OPEN expressao t_PAR_CLOSE .)
    t_OP_DIV        reduce using rule 8 (termo -> t_PAR_OPEN expressao t_PAR_CLOSE .)
    $end            reduce using rule 8 (termo -> t_PAR_OPEN expressao t_PAR_CLOSE .)

