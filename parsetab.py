
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftt_OP_ADDt_OP_SUBleftt_OP_MULt_OP_DIVEOF ERRADO FALSE FLOAT_NUMBER ID IDENTIFIER INT_NUMBER KW_ELSE KW_FLOAT KW_FOR KW_FOR_CLOSE KW_FOR_OPEN KW_FPUNC KW_FUNCTION KW_FUNC_ARGS_SEP KW_FUNC_CLOSE KW_FUNC_OPEN_ARGS KW_IF KW_IF_CLOSE KW_IF_OPEN KW_INPUT KW_INT KW_PRINT KW_STRING KW_WHILE OP_ADD OP_ATRIB OP_DEC OP_DIV1 OP_EXP OP_INC OP_LOG_AND OP_LOG_BT OP_LOG_BT_EKW_FUNC_OPEN OP_LOG_DIFF OP_LOG_EQUAL OP_LOG_LT OP_LOG_LT_E OP_LOG_NOT OP_LOG_OR OP_MUL OP_SUB PAR_CLOSE PAR_OPEN STRING TRUE t_KW_FOR_CLOSE t_KW_FOR_OPEN t_KW_FPUNC t_KW_FUNCTION t_KW_FUNC_ARGS_SEP t_KW_FUNC_OPEN t_KW_FUNC_OPEN_ARGS t_KW_IF_OPEN t_OP_ADD t_OP_ATRIB t_OP_DEC t_OP_DIV t_OP_EXP t_OP_INC t_OP_LOG_AND t_OP_LOG_BT t_OP_LOG_BT_E t_OP_LOG_DIFF t_OP_LOG_EQUAL t_OP_LOG_LT t_OP_LOG_LT_E t_OP_LOG_NOT t_OP_LOG_OR t_OP_MUL t_OP_SUB t_PAR_CLOSE t_PAR_OPENexpressao  : expressao t_OP_ADD termoexpressao  : expressao t_OP_SUB termoexpressao  : expressao t_OP_MUL termoexpressao  : expressao t_OP_DIV termoexpressao  : termotermo  : KW_FLOAT\n              | KW_INT\n              | t_PAR_OPEN expressao t_PAR_CLOSE\n    '
    
_lr_action_items = {'t_OP_ADD':([1,2,4,5,10,11,12,13,14,15,],[6,-7,-5,-6,6,-1,-3,-4,-2,-8,]),'KW_INT':([0,3,6,7,8,9,],[2,2,2,2,2,2,]),'t_OP_MUL':([1,2,4,5,10,11,12,13,14,15,],[7,-7,-5,-6,7,-1,-3,-4,-2,-8,]),'t_OP_DIV':([1,2,4,5,10,11,12,13,14,15,],[8,-7,-5,-6,8,-1,-3,-4,-2,-8,]),'t_PAR_OPEN':([0,3,6,7,8,9,],[3,3,3,3,3,3,]),'KW_FLOAT':([0,3,6,7,8,9,],[5,5,5,5,5,5,]),'t_OP_SUB':([1,2,4,5,10,11,12,13,14,15,],[9,-7,-5,-6,9,-1,-3,-4,-2,-8,]),'t_PAR_CLOSE':([2,4,5,10,11,12,13,14,15,],[-7,-5,-6,15,-1,-3,-4,-2,-8,]),'$end':([1,2,4,5,11,12,13,14,15,],[0,-7,-5,-6,-1,-3,-4,-2,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'termo':([0,3,6,7,8,9,],[4,4,11,12,13,14,]),'expressao':([0,3,],[1,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressao","S'",1,None,None,None),
  ('expressao -> expressao t_OP_ADD termo','expressao',3,'p_soma','Analisador_Sintatico.py',53),
  ('expressao -> expressao t_OP_SUB termo','expressao',3,'p_subtracao','Analisador_Sintatico.py',57),
  ('expressao -> expressao t_OP_MUL termo','expressao',3,'p_multiplicacao','Analisador_Sintatico.py',61),
  ('expressao -> expressao t_OP_DIV termo','expressao',3,'p_divisao','Analisador_Sintatico.py',65),
  ('expressao -> termo','expressao',1,'p_atribuicao','Analisador_Sintatico.py',69),
  ('termo -> KW_FLOAT','termo',1,'p_termo','Analisador_Sintatico.py',73),
  ('termo -> KW_INT','termo',1,'p_termo','Analisador_Sintatico.py',74),
  ('termo -> t_PAR_OPEN expressao t_PAR_CLOSE','termo',3,'p_termo','Analisador_Sintatico.py',75),
]
