
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOP_ATRIBleftOP_LOG_BTOP_LOG_LTOP_LOG_BT_EOP_LOG_LT_EOP_LOG_DIFFleftOP_ADDOP_SUBleftOP_MULOP_DIVleftPAR_OPENPAR_CLOSEleftOP_EXPEM EOF ERROR FACA FALSE FLOAT_NUMBER ID INT_NUMBER KW_BOOLEAN KW_CLOSE KW_ELSE KW_END_LINE KW_FLOAT KW_FOR_CLOSE KW_FOR_OPEN KW_FUNCTION KW_FUNC_OPEN KW_FUNC_OPEN_ARGS KW_IF KW_IF_OPEN KW_INPUT KW_INT KW_PRINT KW_RETURN KW_STRING KW_WHILE OP_ADD OP_ATRIB OP_DEC OP_DIV OP_EXP OP_INC OP_LOG_AND OP_LOG_BT OP_LOG_BT_E OP_LOG_DIFF OP_LOG_EQUAL OP_LOG_LT OP_LOG_LT_E OP_LOG_NOT OP_LOG_OR OP_MUL OP_SUB PAR_CLOSE PAR_OPEN STRING TRUE VIRGULA\n        programa : lista_declaracoes\n    \n    lista_declaracoes : declaracao lista_declaracoes\n                      | declaracao\n    \n    declaracao : expressao KW_END_LINE\n               | declaracao_if KW_END_LINE\n               | declaracao_for KW_END_LINE\n               | declaracao_while KW_END_LINE\n               | declaracao_print\n               | declaracao_ler KW_END_LINE\n               | declaracao KW_END_LINE\n               | declaracao_variavel_sem_valores KW_END_LINE\n               | atribuicao KW_END_LINE\n               | expressao_booleana KW_END_LINE\n               | declaracao_funcao KW_END_LINE\n               | retorna KW_END_LINE\n    \n    expressao : expressao OP_ADD expressao\n              | expressao OP_SUB expressao\n              | expressao OP_MUL expressao\n              | expressao OP_DIV expressao\n              | expressao OP_EXP expressao\n              | OP_INC ID\n              | OP_DEC ID\n              | KW_INT\n              | KW_FLOAT\n              | KW_STRING\n              | expressao_booleana\n              | ID\n    \n    expressao_booleana : expressao OP_LOG_BT_E expressao\n                       | expressao OP_LOG_LT_E expressao\n                       | expressao OP_LOG_EQUAL expressao\n                       | expressao OP_LOG_DIFF expressao\n                       | expressao OP_LOG_LT expressao\n                       | expressao OP_LOG_BT expressao\n    \n    boolean : TRUE\n            | FALSE\n    \n    atribuicao : ID OP_ATRIB expressao\n               | atribuicao VIRGULA atribuicao\n    \n    lista_variaveis : ID VIRGULA lista_variaveis\n                    | ID\n    \n    declaracao_variavel_sem_valores : tipo ID VIRGULA lista_variaveis\n                                    | tipo ID\n    \n    criacao_variavel : tipo ID OP_ATRIB expressao VIRGULA atribuicao\n               | tipo ID OP_ATRIB expressao\n    \n    expressao : PAR_OPEN expressao PAR_CLOSE\n    \n    argumentos : argumentos VIRGULA argumentos\n               | tipo ID\n    \n    tipo : KW_INT\n         | KW_BOOLEAN\n         | KW_FLOAT\n         | KW_STRING\n\n    \n    declaracao_if : KW_IF expressao_booleana KW_IF_OPEN lista_declaracoes KW_CLOSE\n                  | KW_IF expressao_booleana KW_IF_OPEN lista_declaracoes KW_ELSE declaracao_if\n    \n    declaracao_print : KW_PRINT parametros KW_END_LINE\n    \n    declaracao_ler : KW_INPUT ID\n    \n    declaracao_for : KW_FOR_OPEN ID EM expressao FACA lista_declaracoes KW_CLOSE KW_END_LINE\n    \n    declaracao_while : KW_WHILE expressao_booleana FACA lista_declaracoes KW_CLOSE\n    \n    declaracao_funcao : KW_FUNCTION ID KW_FUNC_OPEN lista_declaracoes KW_CLOSE\n    \n    declaracao_funcao : KW_FUNCTION ID KW_FUNC_OPEN_ARGS argumentos KW_FUNC_OPEN lista_declaracoes KW_CLOSE KW_END_LINE\n    \n    expressao : ID KW_FUNC_OPEN_ARGS parametros\n    \n    retorna : KW_RETURN expressao\n    \n    parametros : expressao\n               | parametros VIRGULA parametros\n    '
    
_lr_action_items = {'OP_INC':([0,3,8,21,22,24,25,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,56,57,91,92,93,94,95,97,113,117,],[15,15,-8,15,15,15,15,15,-10,-4,15,15,15,15,15,15,15,15,15,15,15,-5,-6,-7,-9,-11,-12,-13,-14,-15,15,15,15,15,15,-53,15,15,15,15,]),'OP_DEC':([0,3,8,21,22,24,25,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,56,57,91,92,93,94,95,97,113,117,],[17,17,-8,17,17,17,17,17,-10,-4,17,17,17,17,17,17,17,17,17,17,17,-5,-6,-7,-9,-11,-12,-13,-14,-15,17,17,17,17,17,-53,17,17,17,17,]),'KW_INT':([0,3,8,21,22,24,25,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,56,57,91,92,93,94,95,97,98,113,117,118,],[18,18,-8,61,61,61,61,61,-10,-4,61,61,61,61,61,61,61,61,61,61,61,-5,-6,-7,-9,-11,-12,-13,-14,-15,61,61,18,61,18,-53,61,18,108,18,18,108,]),'KW_FLOAT':([0,3,8,21,22,24,25,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,56,57,91,92,93,94,95,97,98,113,117,118,],[19,19,-8,62,62,62,62,62,-10,-4,62,62,62,62,62,62,62,62,62,62,62,-5,-6,-7,-9,-11,-12,-13,-14,-15,62,62,19,62,19,-53,62,19,109,19,19,109,]),'KW_STRING':([0,3,8,21,22,24,25,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,56,57,91,92,93,94,95,97,98,113,117,118,],[20,20,-8,63,63,63,63,63,-10,-4,63,63,63,63,63,63,63,63,63,63,63,-5,-6,-7,-9,-11,-12,-13,-14,-15,63,63,20,63,20,-53,63,20,110,20,20,110,]),'ID':([0,3,8,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,91,92,93,94,95,96,97,107,108,109,110,113,115,117,],[16,16,-8,55,58,-47,-49,-50,60,60,67,60,60,71,72,73,60,-48,-10,-4,60,60,60,60,60,60,60,60,60,60,60,-5,-6,-7,-9,-11,-12,87,-13,-14,-15,60,60,16,60,16,-53,60,103,16,119,-47,-49,-50,16,103,16,]),'PAR_OPEN':([0,3,8,21,22,24,25,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,56,57,91,92,93,94,95,97,113,117,],[21,21,-8,21,21,21,21,21,-10,-4,21,21,21,21,21,21,21,21,21,21,21,-5,-6,-7,-9,-11,-12,-13,-14,-15,21,21,21,21,21,-53,21,21,21,21,]),'KW_IF':([0,3,8,32,33,45,46,47,48,49,50,52,53,54,91,93,94,97,112,113,117,],[22,22,-8,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,22,22,-53,22,22,22,22,]),'KW_FOR_OPEN':([0,3,8,32,33,45,46,47,48,49,50,52,53,54,91,93,94,97,113,117,],[23,23,-8,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,23,23,-53,23,23,23,]),'KW_WHILE':([0,3,8,32,33,45,46,47,48,49,50,52,53,54,91,93,94,97,113,117,],[24,24,-8,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,24,24,-53,24,24,24,]),'KW_PRINT':([0,3,8,32,33,45,46,47,48,49,50,52,53,54,91,93,94,97,113,117,],[25,25,-8,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,25,25,-53,25,25,25,]),'KW_INPUT':([0,3,8,32,33,45,46,47,48,49,50,52,53,54,91,93,94,97,113,117,],[26,26,-8,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,26,26,-53,26,26,26,]),'KW_FUNCTION':([0,3,8,32,33,45,46,47,48,49,50,52,53,54,91,93,94,97,113,117,],[28,28,-8,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,28,28,-53,28,28,28,]),'KW_RETURN':([0,3,8,32,33,45,46,47,48,49,50,52,53,54,91,93,94,97,113,117,],[29,29,-8,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,29,29,-53,29,29,29,]),'KW_BOOLEAN':([0,3,8,32,33,45,46,47,48,49,50,52,53,54,91,93,94,97,98,113,117,118,],[30,30,-8,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,30,30,-53,30,30,30,30,30,]),'$end':([1,2,3,8,31,32,33,45,46,47,48,49,50,52,53,54,94,],[0,-1,-3,-8,-2,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,-53,]),'KW_CLOSE':([3,8,31,32,33,45,46,47,48,49,50,52,53,54,94,99,101,105,121,123,],[-3,-8,-2,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,-53,111,114,116,125,126,]),'KW_ELSE':([3,8,31,32,33,45,46,47,48,49,50,52,53,54,94,99,],[-3,-8,-2,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,-53,112,]),'KW_END_LINE':([3,4,5,6,7,8,9,10,11,12,13,14,16,18,19,20,32,33,45,46,47,48,49,50,52,53,54,55,58,60,61,62,63,64,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,94,102,103,104,111,114,116,120,122,125,126,127,128,],[32,33,45,46,47,-8,48,49,50,52,53,54,-27,-23,-24,-25,-10,-4,-5,-6,-7,-9,-11,-12,-13,-14,-15,-21,-22,-27,-23,-24,-25,-26,94,-61,-54,-41,-60,-16,-17,-18,-19,-20,-28,-29,-30,-31,-32,-33,-37,-59,-36,-44,-53,-62,-39,-40,-51,-56,-57,-52,-38,127,128,-55,-58,]),'OP_ADD':([4,12,16,18,19,20,55,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,100,102,],[34,-26,-27,-23,-24,-25,-21,-22,34,-27,-23,-24,-25,-26,-26,34,-26,34,34,-16,-17,-18,-19,-20,34,34,34,34,34,34,-59,34,-44,34,-62,]),'OP_SUB':([4,12,16,18,19,20,55,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,100,102,],[35,-26,-27,-23,-24,-25,-21,-22,35,-27,-23,-24,-25,-26,-26,35,-26,35,35,-16,-17,-18,-19,-20,35,35,35,35,35,35,-59,35,-44,35,-62,]),'OP_MUL':([4,12,16,18,19,20,55,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,100,102,],[36,-26,-27,-23,-24,-25,-21,-22,36,-27,-23,-24,-25,-26,-26,36,-26,36,36,36,36,-18,-19,-20,36,36,36,36,36,36,-59,36,-44,36,-62,]),'OP_DIV':([4,12,16,18,19,20,55,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,100,102,],[37,-26,-27,-23,-24,-25,-21,-22,37,-27,-23,-24,-25,-26,-26,37,-26,37,37,37,37,-18,-19,-20,37,37,37,37,37,37,-59,37,-44,37,-62,]),'OP_EXP':([4,12,16,18,19,20,55,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,100,102,],[38,-26,-27,-23,-24,-25,-21,-22,38,-27,-23,-24,-25,-26,-26,38,-26,38,38,38,38,38,38,-20,38,38,38,38,38,38,-59,38,-44,38,-62,]),'OP_LOG_BT_E':([4,12,16,18,19,20,55,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,100,102,],[39,-26,-27,-23,-24,-25,-21,-22,39,-27,-23,-24,-25,-26,-26,39,-26,39,39,-16,-17,-18,-19,-20,-28,-29,39,-31,-32,-33,-59,39,-44,39,-62,]),'OP_LOG_LT_E':([4,12,16,18,19,20,55,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,100,102,],[40,-26,-27,-23,-24,-25,-21,-22,40,-27,-23,-24,-25,-26,-26,40,-26,40,40,-16,-17,-18,-19,-20,-28,-29,40,-31,-32,-33,-59,40,-44,40,-62,]),'OP_LOG_EQUAL':([4,12,16,18,19,20,55,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,100,102,],[41,-26,-27,-23,-24,-25,-21,-22,41,-27,-23,-24,-25,-26,-26,41,-26,41,41,-16,-17,-18,-19,-20,-28,-29,41,-31,-32,-33,-59,41,-44,41,-62,]),'OP_LOG_DIFF':([4,12,16,18,19,20,55,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,100,102,],[42,-26,-27,-23,-24,-25,-21,-22,42,-27,-23,-24,-25,-26,-26,42,-26,42,42,-16,-17,-18,-19,-20,-28,-29,42,-31,-32,-33,-59,42,-44,42,-62,]),'OP_LOG_LT':([4,12,16,18,19,20,55,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,100,102,],[43,-26,-27,-23,-24,-25,-21,-22,43,-27,-23,-24,-25,-26,-26,43,-26,43,43,-16,-17,-18,-19,-20,-28,-29,43,-31,-32,-33,-59,43,-44,43,-62,]),'OP_LOG_BT':([4,12,16,18,19,20,55,58,59,60,61,62,63,64,65,66,68,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,100,102,],[44,-26,-27,-23,-24,-25,-21,-22,44,-27,-23,-24,-25,-26,-26,44,-26,44,44,-16,-17,-18,-19,-20,-28,-29,44,-31,-32,-33,-59,44,-44,44,-62,]),'VIRGULA':([11,55,58,60,61,62,63,64,69,70,72,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,102,103,106,119,124,],[51,-21,-22,-27,-23,-24,-25,-26,95,-61,96,-16,-17,-18,-19,-20,-28,-29,-30,-31,-32,-33,51,95,-36,-44,95,115,118,-46,118,]),'KW_FUNC_OPEN_ARGS':([16,60,73,],[56,56,98,]),'OP_ATRIB':([16,87,],[57,57,]),'PAR_CLOSE':([55,58,59,60,61,62,63,64,70,75,76,77,78,79,80,81,82,83,84,85,88,90,102,],[-21,-22,90,-27,-23,-24,-25,-26,-61,-16,-17,-18,-19,-20,-28,-29,-30,-31,-32,-33,-59,-44,-62,]),'KW_IF_OPEN':([55,58,60,61,62,63,64,65,70,75,76,77,78,79,80,81,82,83,84,85,88,90,102,],[-21,-22,-27,-23,-24,-25,-26,91,-61,-16,-17,-18,-19,-20,-28,-29,-30,-31,-32,-33,-59,-44,-62,]),'FACA':([55,58,60,61,62,63,64,68,70,75,76,77,78,79,80,81,82,83,84,85,88,90,100,102,],[-21,-22,-27,-23,-24,-25,-26,93,-61,-16,-17,-18,-19,-20,-28,-29,-30,-31,-32,-33,-59,-44,113,-62,]),'EM':([67,],[92,]),'KW_FUNC_OPEN':([73,106,119,124,],[97,117,-46,-45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'lista_declaracoes':([0,3,91,93,97,113,117,],[2,31,99,101,105,121,123,]),'declaracao':([0,3,91,93,97,113,117,],[3,3,3,3,3,3,3,]),'expressao':([0,3,21,22,24,25,29,34,35,36,37,38,39,40,41,42,43,44,56,57,91,92,93,95,97,113,117,],[4,4,59,66,66,70,74,75,76,77,78,79,80,81,82,83,84,85,70,89,4,100,4,70,4,4,4,]),'declaracao_if':([0,3,91,93,97,112,113,117,],[5,5,5,5,5,120,5,5,]),'declaracao_for':([0,3,91,93,97,113,117,],[6,6,6,6,6,6,6,]),'declaracao_while':([0,3,91,93,97,113,117,],[7,7,7,7,7,7,7,]),'declaracao_print':([0,3,91,93,97,113,117,],[8,8,8,8,8,8,8,]),'declaracao_ler':([0,3,91,93,97,113,117,],[9,9,9,9,9,9,9,]),'declaracao_variavel_sem_valores':([0,3,91,93,97,113,117,],[10,10,10,10,10,10,10,]),'atribuicao':([0,3,51,91,93,97,113,117,],[11,11,86,11,11,11,11,11,]),'expressao_booleana':([0,3,21,22,24,25,29,34,35,36,37,38,39,40,41,42,43,44,56,57,91,92,93,95,97,113,117,],[12,12,64,65,68,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,12,64,12,64,12,12,12,]),'declaracao_funcao':([0,3,91,93,97,113,117,],[13,13,13,13,13,13,13,]),'retorna':([0,3,91,93,97,113,117,],[14,14,14,14,14,14,14,]),'tipo':([0,3,91,93,97,98,113,117,118,],[27,27,27,27,27,107,27,27,107,]),'parametros':([25,56,95,],[69,88,102,]),'lista_variaveis':([96,115,],[104,122,]),'argumentos':([98,118,],[106,124,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> lista_declaracoes','programa',1,'p_programa','Analisador_Sintatico.py',50),
  ('lista_declaracoes -> declaracao lista_declaracoes','lista_declaracoes',2,'p_lista','Analisador_Sintatico.py',58),
  ('lista_declaracoes -> declaracao','lista_declaracoes',1,'p_lista','Analisador_Sintatico.py',59),
  ('declaracao -> expressao KW_END_LINE','declaracao',2,'p_declaracao','Analisador_Sintatico.py',70),
  ('declaracao -> declaracao_if KW_END_LINE','declaracao',2,'p_declaracao','Analisador_Sintatico.py',71),
  ('declaracao -> declaracao_for KW_END_LINE','declaracao',2,'p_declaracao','Analisador_Sintatico.py',72),
  ('declaracao -> declaracao_while KW_END_LINE','declaracao',2,'p_declaracao','Analisador_Sintatico.py',73),
  ('declaracao -> declaracao_print','declaracao',1,'p_declaracao','Analisador_Sintatico.py',74),
  ('declaracao -> declaracao_ler KW_END_LINE','declaracao',2,'p_declaracao','Analisador_Sintatico.py',75),
  ('declaracao -> declaracao KW_END_LINE','declaracao',2,'p_declaracao','Analisador_Sintatico.py',76),
  ('declaracao -> declaracao_variavel_sem_valores KW_END_LINE','declaracao',2,'p_declaracao','Analisador_Sintatico.py',77),
  ('declaracao -> atribuicao KW_END_LINE','declaracao',2,'p_declaracao','Analisador_Sintatico.py',78),
  ('declaracao -> expressao_booleana KW_END_LINE','declaracao',2,'p_declaracao','Analisador_Sintatico.py',79),
  ('declaracao -> declaracao_funcao KW_END_LINE','declaracao',2,'p_declaracao','Analisador_Sintatico.py',80),
  ('declaracao -> retorna KW_END_LINE','declaracao',2,'p_declaracao','Analisador_Sintatico.py',81),
  ('expressao -> expressao OP_ADD expressao','expressao',3,'p_operacoes_binarias','Analisador_Sintatico.py',89),
  ('expressao -> expressao OP_SUB expressao','expressao',3,'p_operacoes_binarias','Analisador_Sintatico.py',90),
  ('expressao -> expressao OP_MUL expressao','expressao',3,'p_operacoes_binarias','Analisador_Sintatico.py',91),
  ('expressao -> expressao OP_DIV expressao','expressao',3,'p_operacoes_binarias','Analisador_Sintatico.py',92),
  ('expressao -> expressao OP_EXP expressao','expressao',3,'p_operacoes_binarias','Analisador_Sintatico.py',93),
  ('expressao -> OP_INC ID','expressao',2,'p_operacoes_binarias','Analisador_Sintatico.py',94),
  ('expressao -> OP_DEC ID','expressao',2,'p_operacoes_binarias','Analisador_Sintatico.py',95),
  ('expressao -> KW_INT','expressao',1,'p_operacoes_binarias','Analisador_Sintatico.py',96),
  ('expressao -> KW_FLOAT','expressao',1,'p_operacoes_binarias','Analisador_Sintatico.py',97),
  ('expressao -> KW_STRING','expressao',1,'p_operacoes_binarias','Analisador_Sintatico.py',98),
  ('expressao -> expressao_booleana','expressao',1,'p_operacoes_binarias','Analisador_Sintatico.py',99),
  ('expressao -> ID','expressao',1,'p_operacoes_binarias','Analisador_Sintatico.py',100),
  ('expressao_booleana -> expressao OP_LOG_BT_E expressao','expressao_booleana',3,'p_expressao_booleana','Analisador_Sintatico.py',123),
  ('expressao_booleana -> expressao OP_LOG_LT_E expressao','expressao_booleana',3,'p_expressao_booleana','Analisador_Sintatico.py',124),
  ('expressao_booleana -> expressao OP_LOG_EQUAL expressao','expressao_booleana',3,'p_expressao_booleana','Analisador_Sintatico.py',125),
  ('expressao_booleana -> expressao OP_LOG_DIFF expressao','expressao_booleana',3,'p_expressao_booleana','Analisador_Sintatico.py',126),
  ('expressao_booleana -> expressao OP_LOG_LT expressao','expressao_booleana',3,'p_expressao_booleana','Analisador_Sintatico.py',127),
  ('expressao_booleana -> expressao OP_LOG_BT expressao','expressao_booleana',3,'p_expressao_booleana','Analisador_Sintatico.py',128),
  ('boolean -> TRUE','boolean',1,'p_boolean','Analisador_Sintatico.py',152),
  ('boolean -> FALSE','boolean',1,'p_boolean','Analisador_Sintatico.py',153),
  ('atribuicao -> ID OP_ATRIB expressao','atribuicao',3,'p_atribuicao','Analisador_Sintatico.py',161),
  ('atribuicao -> atribuicao VIRGULA atribuicao','atribuicao',3,'p_atribuicao','Analisador_Sintatico.py',162),
  ('lista_variaveis -> ID VIRGULA lista_variaveis','lista_variaveis',3,'p_lista_variaveis','Analisador_Sintatico.py',173),
  ('lista_variaveis -> ID','lista_variaveis',1,'p_lista_variaveis','Analisador_Sintatico.py',174),
  ('declaracao_variavel_sem_valores -> tipo ID VIRGULA lista_variaveis','declaracao_variavel_sem_valores',4,'p_declaracao_sem_valores','Analisador_Sintatico.py',185),
  ('declaracao_variavel_sem_valores -> tipo ID','declaracao_variavel_sem_valores',2,'p_declaracao_sem_valores','Analisador_Sintatico.py',186),
  ('criacao_variavel -> tipo ID OP_ATRIB expressao VIRGULA atribuicao','criacao_variavel',6,'p_criacao_variavel','Analisador_Sintatico.py',197),
  ('criacao_variavel -> tipo ID OP_ATRIB expressao','criacao_variavel',4,'p_criacao_variavel','Analisador_Sintatico.py',198),
  ('expressao -> PAR_OPEN expressao PAR_CLOSE','expressao',3,'p_par','Analisador_Sintatico.py',209),
  ('argumentos -> argumentos VIRGULA argumentos','argumentos',3,'p_argumentos','Analisador_Sintatico.py',217),
  ('argumentos -> tipo ID','argumentos',2,'p_argumentos','Analisador_Sintatico.py',218),
  ('tipo -> KW_INT','tipo',1,'p_tipos','Analisador_Sintatico.py',229),
  ('tipo -> KW_BOOLEAN','tipo',1,'p_tipos','Analisador_Sintatico.py',230),
  ('tipo -> KW_FLOAT','tipo',1,'p_tipos','Analisador_Sintatico.py',231),
  ('tipo -> KW_STRING','tipo',1,'p_tipos','Analisador_Sintatico.py',232),
  ('declaracao_if -> KW_IF expressao_booleana KW_IF_OPEN lista_declaracoes KW_CLOSE','declaracao_if',5,'p_if','Analisador_Sintatico.py',241),
  ('declaracao_if -> KW_IF expressao_booleana KW_IF_OPEN lista_declaracoes KW_ELSE declaracao_if','declaracao_if',6,'p_if','Analisador_Sintatico.py',242),
  ('declaracao_print -> KW_PRINT parametros KW_END_LINE','declaracao_print',3,'p_printa','Analisador_Sintatico.py',253),
  ('declaracao_ler -> KW_INPUT ID','declaracao_ler',2,'p_ler','Analisador_Sintatico.py',261),
  ('declaracao_for -> KW_FOR_OPEN ID EM expressao FACA lista_declaracoes KW_CLOSE KW_END_LINE','declaracao_for',8,'p_for','Analisador_Sintatico.py',269),
  ('declaracao_while -> KW_WHILE expressao_booleana FACA lista_declaracoes KW_CLOSE','declaracao_while',5,'p_while','Analisador_Sintatico.py',277),
  ('declaracao_funcao -> KW_FUNCTION ID KW_FUNC_OPEN lista_declaracoes KW_CLOSE','declaracao_funcao',5,'p_funcao','Analisador_Sintatico.py',285),
  ('declaracao_funcao -> KW_FUNCTION ID KW_FUNC_OPEN_ARGS argumentos KW_FUNC_OPEN lista_declaracoes KW_CLOSE KW_END_LINE','declaracao_funcao',8,'p_funcao_argumentos','Analisador_Sintatico.py',293),
  ('expressao -> ID KW_FUNC_OPEN_ARGS parametros','expressao',3,'p_function_call','Analisador_Sintatico.py',301),
  ('retorna -> KW_RETURN expressao','retorna',2,'p_return','Analisador_Sintatico.py',309),
  ('parametros -> expressao','parametros',1,'p_parametros','Analisador_Sintatico.py',317),
  ('parametros -> parametros VIRGULA parametros','parametros',3,'p_parametros','Analisador_Sintatico.py',318),
]
